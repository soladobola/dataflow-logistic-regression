#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Vectors"
#define MAXFILE_BUILD_DIR  "/tmp/Vectors_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20211212
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(vectorSize, 8)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 38)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "VectorsKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(VectorsKernel, Kernel)
MANAGER_NODE(example, PCIe_From_Host)
MANAGER_NODE(theta, PCIe_From_Host)
MANAGER_NODE(y, PCIe_From_Host)
MANAGER_NODE(result, PCIe_To_Host)
MANAGER_NODE(Stream_4, DualAspectReg)
MANAGER_NODE(Stream_1, DualAspectReg)
MANAGER_NODE(Stream_7, DualAspectMux)
MANAGER_NODE(Stream_12, DualAspectMux)
MANAGER_NODE(Stream_18, Fifo)
MANAGER_NODE(Stream_14, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_16, Fifo)
MANAGER_NODE(Stream_20, Fifo)
MANAGER_NODE(Stream_24, Fifo)
MANAGER_NODE(Stream_26, Fifo)
MANAGER_NODE(Stream_28, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(VectorsKernel, theta, IN, STREAM, 256, PULL)
MANAGER_NODE_IO(VectorsKernel, example, IN, STREAM, 256, PULL)
MANAGER_NODE_IO(VectorsKernel, y, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(VectorsKernel, result, OUT, STREAM, 256, PUSH)
MANAGER_NODE_IO(example, example, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(theta, theta, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(y, y, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(result, result, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_4, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_7, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_7, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_18, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_18, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_22, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_16, input, IN, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_20, input, IN, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_20, output, OUT, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_24, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_24, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_26, input, IN, STREAM, 256, PUSH)
MANAGER_NODE_IO(Stream_26, output, OUT, STREAM, 256, PULL)
MANAGER_NODE_IO(Stream_28, input, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_28, output, OUT, PCIE, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(example, example, Stream_18, input, 128)
MANAGER_STREAM(theta, theta, Stream_14, input, 128)
MANAGER_STREAM(y, y, Stream_22, input, 128)
MANAGER_STREAM(VectorsKernel, result, Stream_26, input, 256)
MANAGER_STREAM(Stream_4, output, Stream_16, input, 256)
MANAGER_STREAM(Stream_1, output, Stream_20, input, 256)
MANAGER_STREAM(Stream_7, output, Stream_24, input, 32)
MANAGER_STREAM(Stream_12, output, Stream_28, input, 128)
MANAGER_STREAM(Stream_18, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_14, output, Stream_4, input, 128)
MANAGER_STREAM(Stream_22, output, Stream_7, input, 128)
MANAGER_STREAM(Stream_16, output, VectorsKernel, theta, 256)
MANAGER_STREAM(Stream_20, output, VectorsKernel, example, 256)
MANAGER_STREAM(Stream_24, output, VectorsKernel, y, 32)
MANAGER_STREAM(Stream_26, output, Stream_12, input, 256)
MANAGER_STREAM(Stream_28, output, result, result, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(VectorsKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(example, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(theta, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(result, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_7, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_18, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_20, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_24, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_26, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(VectorsKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(VectorsKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(VectorsKernel, VectorsKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(VectorsKernel, theta, 0)
DEBUG_INPUT_BITS(VectorsKernel, example, 1)
DEBUG_INPUT_BITS(VectorsKernel, y, 2)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(VectorsKernel, result, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(example, PCIePushSourceSyncMax4, "example")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(theta, PCIePushSourceSyncMax4, "theta")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSourceSyncMax4, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_18, FifoPushToPullSync, "Stream_18", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, FifoPushToPullSync, "Stream_14", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectRegSync, "Stream_1", 128, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectRegSync, "Stream_4", 128, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_7, DualAspectMuxSync, "Stream_7", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, FifoPullToPullSync, "Stream_20", false, 512, 256)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, FifoPullToPullSync, "Stream_16", false, 512, 256)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, FifoPushToPullSync, "Stream_24", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(VectorsKernel, VectorsKernel, "VectorsKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_26, FifoPushToPullSync, "Stream_26", false, 512, 256)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, DualAspectMuxSync, "Stream_12", 128, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, FifoPushToPushSync, "Stream_28", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(result, PCIePushSinkSyncMax3, "result")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 3, 1, 0, 0, 0, 0, 0, 38)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "eff5ab29b49ac70e73b35704db2c0e51500cb26bc7ee83ea34db5bbcb8259348")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_done, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_read, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_ctld_request, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_fill_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_flush_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_flush_start_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_full_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(VectorsKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(example, STREAM_FROM_HOST, 0)
PCIE_STREAM(theta, STREAM_FROM_HOST, 1)
PCIE_STREAM(y, STREAM_FROM_HOST, 2)
PCIE_STREAM(result, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(VectorsKernel.io_theta_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(VectorsKernel.io_example_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(VectorsKernel.io_y_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(VectorsKernel.io_result_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(VectorsKernel.run_cycle_count, 0x4, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(VectorsKernel.current_run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(VectorsKernel.dbg_ctld_almost_empty, 0x10, 1, hwBits(3))
REG(VectorsKernel.dbg_ctld_done, 0x11, 1, hwBits(3))
REG(VectorsKernel.dbg_ctld_empty, 0x12, 1, hwBits(3))
REG(VectorsKernel.dbg_ctld_read, 0x13, 1, hwBits(3))
REG(VectorsKernel.dbg_ctld_read_pipe_dbg, 0x14, 2, hwBits(9))
REG(VectorsKernel.dbg_ctld_request, 0x16, 1, hwBits(3))
REG(VectorsKernel.dbg_done_out, 0x17, 1, hwBits(1))
REG(VectorsKernel.dbg_fill_level, 0x18, 1, hwBits(8))
REG(VectorsKernel.dbg_flush_level, 0x19, 1, hwBits(8))
REG(VectorsKernel.dbg_flush_start, 0x1a, 1, hwBits(1))
REG(VectorsKernel.dbg_flush_start_level, 0x1b, 1, hwBits(8))
REG(VectorsKernel.dbg_flushing, 0x1c, 1, hwBits(1))
REG(VectorsKernel.dbg_full_level, 0x1d, 1, hwBits(8))
REG(VectorsKernel.dbg_out_stall, 0x1e, 1, hwBits(1))
REG(VectorsKernel.dbg_out_valid, 0x1f, 1, hwBits(1))
REG(VectorsKernel.dbg_stall_vector, 0x20, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x21, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x22, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(VectorsKernel.io_theta_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(VectorsKernel.io_example_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(VectorsKernel.io_y_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(VectorsKernel.io_result_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(VectorsKernel.run_cycle_count, 0x4, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(VectorsKernel.current_run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_almost_empty, 0x10, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_done, 0x11, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_empty, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_read, 0x13, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_read_pipe_dbg, 0x14, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_ctld_request, 0x16, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_done_out, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_fill_level, 0x18, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_flush_level, 0x19, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_flush_start, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_flush_start_level, 0x1b, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_flushing, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_full_level, 0x1d, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_out_stall, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_out_valid, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(VectorsKernel.dbg_stall_vector, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x21, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x22, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("eff5ab29b49ac70e73b35704db2c0e51500cb26bc7ee83ea34db5bbcb8259348")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Vectors
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Vectors_H
#define SLIC_DECLARATIONS_Vectors_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Vectors_PCIE_ALIGNMENT (16)
#define Vectors_vectorSize (8)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_example The stream should be of size ((param_N * 8) * 4) bytes.
 * \param [in] instream_theta The stream should be of size ((param_N * 8) * 4) bytes.
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_result The stream should be of size ((param_N * 8) * 4) bytes.
 */
void Vectors(
	int32_t param_N,
	const float *instream_example,
	const float *instream_theta,
	const float *instream_y,
	float *outstream_result);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_example The stream should be of size ((param_N * 8) * 4) bytes.
 * \param [in] instream_theta The stream should be of size ((param_N * 8) * 4) bytes.
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_result The stream should be of size ((param_N * 8) * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Vectors_nonblock(
	int32_t param_N,
	const float *instream_example,
	const float *instream_theta,
	const float *instream_y,
	float *outstream_result);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const float *instream_example; /**<  [in] The stream should be of size ((param_N * 8) * 4) bytes. */
	const float *instream_theta; /**<  [in] The stream should be of size ((param_N * 8) * 4) bytes. */
	const float *instream_y; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	float *outstream_result; /**<  [out] The stream should be of size ((param_N * 8) * 4) bytes. */
} Vectors_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Vectors_run(
	max_engine_t *engine,
	Vectors_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Vectors_run_nonblock(
	max_engine_t *engine,
	Vectors_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Vectors_run_group(max_group_t *group, Vectors_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Vectors_run_group_nonblock(max_group_t *group, Vectors_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Vectors_run_array(max_engarray_t *engarray, Vectors_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Vectors_run_array_nonblock(max_engarray_t *engarray, Vectors_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Vectors_convert(max_file_t *maxfile, Vectors_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Vectors_init(void);

/* Error handling functions */
int Vectors_has_errors(void);
const char* Vectors_get_errors(void);
void Vectors_clear_errors(void);
/* Free statically allocated maxfile data */
void Vectors_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Vectors_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Vectors_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Vectors_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(VectorsKernel, 79, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 80, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 19, NodeInputMappedReg, "Scalar input (io_example_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 21, NodeInput, "Input(example)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 36, NodeSlice, "[255:224]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 37, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 122, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 0, NodeInputMappedReg, "Scalar input (io_theta_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 2, NodeInput, "Input(theta)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 3, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 4, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 22, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 23, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 42, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 5, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 6, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 24, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 25, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 44, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 45, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 7, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 8, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 112, NodeFIFO, "FIFO(14)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 26, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 111, NodeFIFO, "FIFO(14)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 27, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 46, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 47, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 9, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 10, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 28, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 29, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 48, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 113, NodeFIFO, "FIFO(28)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 49, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 11, NodeSlice, "[159:128]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 12, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 30, NodeSlice, "[159:128]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 31, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 50, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 114, NodeFIFO, "FIFO(42)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 51, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 13, NodeSlice, "[191:160]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 14, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 32, NodeSlice, "[191:160]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 33, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 52, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 115, NodeFIFO, "FIFO(56)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 53, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 15, NodeSlice, "[223:192]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 16, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 34, NodeSlice, "[223:192]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 35, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:30)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 54, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 116, NodeFIFO, "FIFO(70)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 55, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 17, NodeSlice, "[255:224]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 18, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:27)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 56, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 117, NodeFIFO, "FIFO(84)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 57, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:41)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 118, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 110, NodePO2FPMult, "PO2FPMult_N-1", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:993)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 121, NodeFIFO, "FIFO(14)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 134, NodeConstantRawBits, "{HWFloat:8, 24}\n0x3f800000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:911)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 133, NodeConstantRawBits, "{HWFloat:8, 24}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:46)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 59, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:46)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 60, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1070)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:46)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 61, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:46)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 65, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.addAsRHS(DFEVar.java:911)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 66, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1014)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 132, NodeConstantRawBits, "{HWFloat:8, 24}\n0x3f000000; 0.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 68, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 38, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:33)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 39, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:33)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 40, NodeInput, "Input(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:33)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 69, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:47)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 77, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 96, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 123, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 76, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 94, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 124, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 75, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 92, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 125, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 74, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 90, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 126, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 73, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 88, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 127, NodeFIFO, "FIFO(173)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 72, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 86, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 128, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 71, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 84, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 129, NodeFIFO, "FIFO(187)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 70, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:52)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 83, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 85, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 87, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 89, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 91, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 93, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 95, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 97, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 82, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nvectors.VectorsKernel.<init>(VectorsKernel.maxj:56)\nvectors.VectorsManager.main(VectorsManager.maxj:20)\n")
PHOTON_NODE_DATA(VectorsKernel, 102, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 131, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 99, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 100, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 101, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 103, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 130, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 105, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 106, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 108, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 109, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
PHOTON_NODE_DATA(VectorsKernel, 107, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nvectors.VectorsManager.main(VectorsManager.maxj:25)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Vectors_has_errors(void)
{	return stored_has_error; }
const char* Vectors_get_errors(void)
{	return stored_error; }
void Vectors_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Vectors_use_simulation[16];
static void Vectors_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Vectors_use_simulation, 16, "Vectors_%05ld_", pid);
}
static const char *Vectors_check_use_simulation(void)
{
	Vectors_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Vectors_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Vectors_simulation_launch = 0;
int Vectors_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Vectors_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Vectors_simulator_stop(void)
{
	const char *use_sim = Vectors_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Vectors_static_init(void) 
{
	stored_maxfile = Vectors_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Vectors_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Vectors_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Vectors_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Vectors_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Vectors_simulation_launch == 1) {
		int sim_stat = Vectors_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Vectors_simulation_launch = 0;
	}
}

static int Vectors_get_pcie_alignment(void)
{
#ifdef Vectors_PCIE_ALIGNMENT
	return ((Vectors_PCIE_ALIGNMENT < 1) ? 16 : Vectors_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Vectors_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Vectors_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Vectors_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Vectors_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Vectors_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Vectors_callback_stream_t;

typedef struct Vectors_callback_data {
	Vectors_callback_stream_t stream[4]; 
	int count;
	int max_count;
} Vectors_callback_data_t;

static void Vectors_callback_internal(void *cb_data)
{
	Vectors_callback_data_t *data = (Vectors_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Vectors_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Vectors_convert_internal(
	max_file_t *maxfile,
	Vectors_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Vectors_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Vectors_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Vectors_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 4;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Vectors_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar VectorsKernel.run_cycle_count */
	uint64_t ticks_VectorsKernel = param_N;
	max_set_ticks(actions, "VectorsKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar VectorsKernel.run_cycle_count*/
	
	int64_t tmp_1 = ((param_N * 8) * 4);
	
	/* code for stream example */
	size_t instream_size_example = tmp_1;
	if (instream_size_example > 0) {
		const float *stream_ptr = interface_actions->instream_example;
		if (use_callback && (1 == Vectors_check_aligned(interface_actions->instream_example))) {
			float *aligned_instream_example = malloc(instream_size_example);
			if (aligned_instream_example == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'example'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_example;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_example;
			(&cb_data->stream[cb_data->count])->size        = instream_size_example;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_example, interface_actions->instream_example, instream_size_example);
			stream_ptr = aligned_instream_example;
		}
		max_queue_input(actions, "example", stream_ptr, instream_size_example);
		CHECK_ERRORS;
	}
	/* end of code for stream example */
	
	int64_t tmp_0 = ((param_N * 8) * 4);
	
	/* code for stream theta */
	size_t instream_size_theta = tmp_0;
	if (instream_size_theta > 0) {
		const float *stream_ptr = interface_actions->instream_theta;
		if (use_callback && (1 == Vectors_check_aligned(interface_actions->instream_theta))) {
			float *aligned_instream_theta = malloc(instream_size_theta);
			if (aligned_instream_theta == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'theta'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_theta;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_theta;
			(&cb_data->stream[cb_data->count])->size        = instream_size_theta;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_theta, interface_actions->instream_theta, instream_size_theta);
			stream_ptr = aligned_instream_theta;
		}
		max_queue_input(actions, "theta", stream_ptr, instream_size_theta);
		CHECK_ERRORS;
	}
	/* end of code for stream theta */
	
	int64_t tmp_2 = (param_N * 4);
	
	/* code for stream y */
	size_t instream_size_y = tmp_2;
	if (instream_size_y > 0) {
		const float *stream_ptr = interface_actions->instream_y;
		if (use_callback && (1 == Vectors_check_aligned(interface_actions->instream_y))) {
			float *aligned_instream_y = malloc(instream_size_y);
			if (aligned_instream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_y;
			(&cb_data->stream[cb_data->count])->size        = instream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_y, interface_actions->instream_y, instream_size_y);
			stream_ptr = aligned_instream_y;
		}
		max_queue_input(actions, "y", stream_ptr, instream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	int64_t tmp_3 = ((param_N * 8) * 4);
	
	/* code for stream result */
	size_t outstream_size_result = tmp_3;
	if (outstream_size_result > 0) {
		float *stream_ptr = interface_actions->outstream_result;
		if (use_callback && (1 == Vectors_check_aligned(interface_actions->outstream_result))) {
			float *aligned_outstream_result = malloc(outstream_size_result);
			if (aligned_outstream_result == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'result'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_result;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_result;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_result;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_result;
		}
		max_queue_output(actions, "result", stream_ptr, outstream_size_result);
		CHECK_ERRORS;
	}
	/* end of code for stream result */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Vectors(
	int32_t param_N,
	const float *instream_example,
	const float *instream_theta,
	const float *instream_y,
	float *outstream_result)
{
	(void) pthread_once(&slic_bs_is_initialised, Vectors_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Vectors_nonblock(param_N, instream_example, instream_theta, instream_y, outstream_result);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Vectors_nonblock(
	int32_t param_N,
	const float *instream_example,
	const float *instream_theta,
	const float *instream_y,
	float *outstream_result)
{
	Vectors_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_example = instream_example;
	interface_actions.instream_theta = instream_theta;
	interface_actions.instream_y = instream_y;
	interface_actions.outstream_result = outstream_result;
	(void) pthread_once(&slic_bs_is_initialised, Vectors_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Vectors_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Vectors_run(
	max_engine_t *engine,
	Vectors_actions_t *interface_actions)
{
	max_run_t *run = Vectors_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Vectors_run_nonblock(
	max_engine_t *engine,
	Vectors_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Vectors_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Vectors_run_group(max_group_t *group, Vectors_actions_t *interface_actions)
{
	max_run_t *run = Vectors_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Vectors_run_group_nonblock(max_group_t *group, Vectors_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Vectors_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Vectors_run_array(max_engarray_t *engarray, Vectors_actions_t *interface_actions[])
{
	max_run_t *run = Vectors_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Vectors_run_array_nonblock(max_engarray_t *engarray, Vectors_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Vectors_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Vectors_convert(max_file_t *maxfile, Vectors_actions_t *interface_actions)
{
	return Vectors_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(VectorsKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_N * 8) * 4);)	
SLIC_STREAM(example, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_0 = ((param_N * 8) * 4);)	
SLIC_STREAM(theta, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_N * 4);)	
SLIC_STREAM(y, tmp_2)	
SLIC_TEMP_VAR(int64_t tmp_3 = ((param_N * 8) * 4);)	
SLIC_STREAM(result, tmp_3)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlZlY3RvcnMuaCIgbmFtZT0i
VmVjdG9ycyI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBlPSJsb25nIiB2YWx1
ZT0iMTYiLz48Y29uc3RhbnQgbmFtZT0idmVjdG9yU2l6ZSIgdHlwZT0ibG9uZyIgdmFsdWU9Ijgi
Lz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0iVmVjdG9ycyIgcmV0
dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7
TiZxdW90Oy46IE51bWJlciBvZiBkYXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlvbj0iSW5w
dXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVh
bSBzaG91bGQgYmUgb2Ygc2l6ZSAoKHBhcmFtX04gKiA4KSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fZXhhbXBsZSIgc2l6ZT0iKChwYXJhbV9OICogOCkgKiA0
KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9hdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxl
bmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9
IigoKHBhcmFtX04gKiA4KSAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJh
dG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKChwYXJhbV9OICogOCkgKiA0KSI+PGZ1bmN0aW9uQ2Fs
bD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDgpIj48
dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjgiLz48L251
bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+
PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0i
NCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNp
b24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAoKHBh
cmFtX04gKiA4KSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1f
dGhldGEiIHNpemU9IigocGFyYW1fTiAqIDgpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0i
ZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChwYXJhbV9OICogOCkgKiA0KSAvIDQp
Ij48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9Iigo
cGFyYW1fTiAqIDgpICogNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJh
dG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA4KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fTiIv
Pjxjb25zdGFudFZhbHVlIHZhbHVlPSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9u
Q2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5j
dGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwv
ZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRo
ZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKHBhcmFtX04gKiA0KSBieXRlcy4iIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX3kiIHNpemU9IihwYXJhbV9OICogNCkiIHRyYW5zcG9z
ZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0
aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX04g
KiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIg
dmFsdWU9IihwYXJhbV9OICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX04iLz48Y29uc3Rh
bnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNv
bnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxs
PjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hv
dWxkIGJlIG9mIHNpemUgKChwYXJhbV9OICogOCkgKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iT3V0
cHV0IiBuYW1lPSJvdXRzdHJlYW1fcmVzdWx0IiBzaXplPSIoKHBhcmFtX04gKiA4KSAqIDQpIiB0
cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3Ro
PjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKCgo
cGFyYW1fTiAqIDgpICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Ig
b3BlcmF0b3I9IioiIHZhbHVlPSIoKHBhcmFtX04gKiA4KSAqIDQpIj48ZnVuY3Rpb25DYWxsPjxu
dW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9OICogOCkiPjx1c2Vy
UGFyYW0gdmFsdWU9InBhcmFtX04iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iOCIvPjwvbnVtQmlu
YXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251
bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+
PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48
L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBWZWN0b3JzX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hhc19lcnJv
cjsgfQpjb25zdCBjaGFyKiBWZWN0b3JzX2dldF9lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVk
X2Vycm9yOyB9CnZvaWQgVmVjdG9yc19jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRf
ZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9Cgpz
dGF0aWMgY2hhciBWZWN0b3JzX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgVmVjdG9y
c19kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgp
KSAlIDEwMDAwMDsKCXNucHJpbnRmKFZlY3RvcnNfdXNlX3NpbXVsYXRpb24sIDE2LCAiVmVjdG9y
c18lMDVsZF8iLCBwaWQpOwp9CnN0YXRpYyBjb25zdCBjaGFyICpWZWN0b3JzX2NoZWNrX3VzZV9z
aW11bGF0aW9uKHZvaWQpCnsKCVZlY3RvcnNfZGVmX3VzZV9zaW11bGF0aW9uKCk7Cgljb25zdCBj
aGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdfVVNFX1NJTVVM
QVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBWZWN0b3JzX3VzZV9z
aW11bGF0aW9uOwoJCW1heF9jb25maWdfc2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFU
SU9OLCB1c2Vfc2ltKTsKCX0KCXJldHVybiB1c2Vfc2ltOwp9CgpzdGF0aWMgaW50IFZlY3RvcnNf
c2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgVmVjdG9yc19zaW11bGF0b3Jfc3RhcnQodm9pZCkK
ewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gVmVjdG9yc19jaGVja191
c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwg
IlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVg0ODQ4
QSAtUyBzaW11dGlscyByZXN0YXJ0IiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4o
YnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBm
YWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihi
dWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkg
IT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBv
dXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJaWYgKHN0cnN0cihidWZm
LCAiRXJyb3IiKSkgewoJCQlzZXRfZXJyb3IoYnVmZik7CgkJCXJldHZhbCA9IC0xOwoJCX0KCX0K
CXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiByZXR2YWw7Cn0KCmludCBWZWN0b3JzX3NpbXVsYXRv
cl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBWZWN0b3JzX2NoZWNrX3VzZV9z
aW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFU
SD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1T
IHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAi
ciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0
byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJ
CXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxM
KSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAq
LwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7
CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgVmVjdG9yc19zdGF0aWNfaW5pdCh2b2lkKSAKewoJ
c3RvcmVkX21heGZpbGUgPSBWZWN0b3JzX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBO
VUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4Zmls
ZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRF
UkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJs
ZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxf
ZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2ds
b2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19t
b2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMg
PSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vf
c2ltID0gVmVjdG9yc19jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IFZlY3Rv
cnNfc2ltdWxhdG9yX3N0YXJ0KCk7CgkJaWYgKChzaW1fc3RhdCA9PSAwKSAmJiAobWF4X3Bpbmdf
ZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAxKSkgewoJCQlWZWN0b3JzX3NpbXVs
YXRpb25fbGF1bmNoID0gMTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJv
ciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1
Y3R1cmUgYXV0b21hdGljYWxseS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAn
dXNlX3NpbXVsYXRpb249PHNpbXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3Vy
IFNMaUMgY29uZmlndXJhdGlvbiIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUg
YXNzb2NpYXRlZCBzaW11bGF0ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhf
ZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQly
ZXR1cm47CgkJfQoJfQoJc3RvcmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAi
KiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcg
bm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJ
c2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9y
cykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUg
PSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhm
aWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lkIFZlY3RvcnNfZnJlZSh2b2lkKQp7CglpZiAo
c3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlz
dG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJ
bWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
fQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0
b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoVmVjdG9yc19zaW11bGF0aW9uX2xhdW5jaCA9PSAx
KSB7CgkJaW50IHNpbV9zdGF0ID0gVmVjdG9yc19zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1f
c3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRv
ci4iKTsKCQl9CgkJVmVjdG9yc19zaW11bGF0aW9uX2xhdW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBp
bnQgVmVjdG9yc19nZXRfcGNpZV9hbGlnbm1lbnQodm9pZCkKewojaWZkZWYgVmVjdG9yc19QQ0lF
X0FMSUdOTUVOVAoJcmV0dXJuICgoVmVjdG9yc19QQ0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBW
ZWN0b3JzX1BDSUVfQUxJR05NRU5UKTsKI2Vsc2UKCXJldHVybiAxNjsKI2VuZGlmCn0KCnN0YXRp
YyBpbnQgVmVjdG9yc19jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJf
dCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBWZWN0b3JzX2dl
dF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAw
Owp9CgpzdGF0aWMgdm9pZCAqVmVjdG9yc19tYWxsb2NfYWxpZ25lZChjb25zdCBzaXplX3Qgc2l6
ZSkKewoJdm9pZCAqcHRyOwoJaW50IGFsaWdubWVudCA9IFZlY3RvcnNfZ2V0X3BjaWVfYWxpZ25t
ZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0
cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVU
KSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NP
TkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwg
IiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJy
b3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0g
CiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxM
KSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJy
b3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0
X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFZlY3RvcnNf
Y2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9w
dHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IFZlY3RvcnNfY2FsbGJh
Y2tfc3RyZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBWZWN0b3JzX2NhbGxiYWNrX2RhdGEgewoJVmVj
dG9yc19jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1bNF07IAoJaW50IGNvdW50OwoJaW50IG1heF9j
b3VudDsKfSBWZWN0b3JzX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIFZlY3RvcnNfY2Fs
bGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJVmVjdG9yc19jYWxsYmFja19kYXRhX3Qg
KmRhdGEgPSAoVmVjdG9yc19jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9
IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJVmVjdG9yc19jYWxsYmFja19zdHJlYW1f
dCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+
IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJ
CX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhf
YWN0aW9uc190KiBWZWN0b3JzX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxl
LAoJVmVjdG9yc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRlcm5h
bF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJhY2tf
ZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4Zmls
ZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBDSEVD
S19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRfZnJl
ZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAKCglW
ZWN0b3JzX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNr
ID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7Cglp
ZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoVmVjdG9yc19jYWxs
YmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJy
LCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4g
ZnVuY3Rpb24gVmVjdG9yc19jb252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJ
fQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDQ7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkq
Y2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZWZWN0
b3JzX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFyYW1fTiA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgVmVjdG9yc0tlcm5lbC5ydW5f
Y3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX1ZlY3RvcnNLZXJuZWwgPSBwYXJhbV9OOwoJ
bWF4X3NldF90aWNrcyhhY3Rpb25zLCAiVmVjdG9yc0tlcm5lbCIsIHBhcmFtX04pOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBWZWN0b3JzS2VybmVsLnJ1bl9jeWNs
ZV9jb3VudCovCgkKCWludDY0X3QgdG1wXzEgPSAoKHBhcmFtX04gKiA4KSAqIDQpOwoJCgkvKiBj
b2RlIGZvciBzdHJlYW0gZXhhbXBsZSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfZXhhbXBsZSA9
IHRtcF8xOwoJaWYgKGluc3RyZWFtX3NpemVfZXhhbXBsZSA+IDApIHsKCQljb25zdCBmbG9hdCAq
c3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leGFtcGxlOwoJCWlmICh1
c2VfY2FsbGJhY2sgJiYgKDEgPT0gVmVjdG9yc19jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rp
b25zLT5pbnN0cmVhbV9leGFtcGxlKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRfaW5zdHJlYW1fZXhh
bXBsZSA9IG1hbGxvYyhpbnN0cmVhbV9zaXplX2V4YW1wbGUpOwoJCQlpZiAoYWxpZ25lZF9pbnN0
cmVhbV9leGFtcGxlID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25z
LT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFs
aWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ2V4YW1wbGUnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJ
CX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAo
dWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leGFtcGxlOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxp
Z25lZF9pbnN0cmVhbV9leGFtcGxlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfZXhhbXBsZTsKCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAwOwoJCQljYl9kYXRhLT5jb3Vu
dCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVhbV9leGFtcGxlLCBpbnRlcmZhY2VfYWN0
aW9ucy0+aW5zdHJlYW1fZXhhbXBsZSwgaW5zdHJlYW1fc2l6ZV9leGFtcGxlKTsKCQkJc3RyZWFt
X3B0ciA9IGFsaWduZWRfaW5zdHJlYW1fZXhhbXBsZTsKCQl9CgkJbWF4X3F1ZXVlX2lucHV0KGFj
dGlvbnMsICJleGFtcGxlIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9leGFtcGxlKTsKCQlD
SEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIGV4YW1wbGUgKi8KCQoJ
aW50NjRfdCB0bXBfMCA9ICgocGFyYW1fTiAqIDgpICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVh
bSB0aGV0YSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfdGhldGEgPSB0bXBfMDsKCWlmIChpbnN0
cmVhbV9zaXplX3RoZXRhID4gMCkgewoJCWNvbnN0IGZsb2F0ICpzdHJlYW1fcHRyID0gaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX3RoZXRhOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0g
VmVjdG9yc19jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV90aGV0YSkp
KSB7CgkJCWZsb2F0ICphbGlnbmVkX2luc3RyZWFtX3RoZXRhID0gbWFsbG9jKGluc3RyZWFtX3Np
emVfdGhldGEpOwoJCQlpZiAoYWxpZ25lZF9pbnN0cmVhbV90aGV0YSA9PSBOVUxMKSB7CgkJCQlt
YXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18s
IDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICd0aGV0
YSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmlu
c3RyZWFtX3RoZXRhOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGln
bmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9pbnN0cmVhbV90aGV0YTsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX3Ro
ZXRhOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9
IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX3Ro
ZXRhLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fdGhldGEsIGluc3RyZWFtX3NpemVfdGhl
dGEpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV90aGV0YTsKCQl9CgkJbWF4X3F1
ZXVlX2lucHV0KGFjdGlvbnMsICJ0aGV0YSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfdGhl
dGEpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gdGhldGEg
Ki8KCQoJaW50NjRfdCB0bXBfMiA9IChwYXJhbV9OICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVh
bSB5ICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV95ID0gdG1wXzI7CglpZiAoaW5zdHJlYW1fc2l6
ZV95ID4gMCkgewoJCWNvbnN0IGZsb2F0ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMt
Pmluc3RyZWFtX3k7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBWZWN0b3JzX2NoZWNrX2Fs
aWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3kpKSkgewoJCQlmbG9hdCAqYWxpZ25l
ZF9pbnN0cmVhbV95ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfeSk7CgkJCWlmIChhbGlnbmVkX2lu
c3RyZWFtX3kgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVy
cm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25l
ZCBtZW1vcnkgZm9yIHN0cmVhbSAneSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNi
X2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90Kikg
aW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX3k7
CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5z
dHJlYW1fc2l6ZV95OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2lu
c3RyZWFtX3ksIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV95LCBpbnN0cmVhbV9zaXplX3kp
OwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV95OwoJCX0KCQltYXhfcXVldWVfaW5w
dXQoYWN0aW9ucywgInkiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX3kpOwoJCUNIRUNLX0VS
Uk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0geSAqLwoJCglpbnQ2NF90IHRtcF8z
ID0gKChwYXJhbV9OICogOCkgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHJlc3VsdCAqLwoJ
c2l6ZV90IG91dHN0cmVhbV9zaXplX3Jlc3VsdCA9IHRtcF8zOwoJaWYgKG91dHN0cmVhbV9zaXpl
X3Jlc3VsdCA+IDApIHsKCQlmbG9hdCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5v
dXRzdHJlYW1fcmVzdWx0OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gVmVjdG9yc19jaGVj
a19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0KSkpIHsKCQkJZmxv
YXQgKmFsaWduZWRfb3V0c3RyZWFtX3Jlc3VsdCA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9yZXN1
bHQpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fcmVzdWx0ID09IE5VTEwpIHsKCQkJCW1heF9y
ZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2
LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ3Jlc3VsdCci
KTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0
cmVhbV9yZXN1bHQ7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWdu
ZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9yZXN1bHQ7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3NpemVf
cmVzdWx0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQg
ICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291
dHN0cmVhbV9yZXN1bHQ7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgInJlc3VsdCIs
IHN0cmVhbV9wdHIsIG91dHN0cmVhbV9zaXplX3Jlc3VsdCk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJ
LyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSByZXN1bHQgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAm
JiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxs
YmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1
bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBWZWN0b3JzKAoJaW50MzJfdCBwYXJhbV9OLAoJY29u
c3QgZmxvYXQgKmluc3RyZWFtX2V4YW1wbGUsCgljb25zdCBmbG9hdCAqaW5zdHJlYW1fdGhldGEs
Cgljb25zdCBmbG9hdCAqaW5zdHJlYW1feSwKCWZsb2F0ICpvdXRzdHJlYW1fcmVzdWx0KQp7Cgko
dm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBWZWN0b3JzX3N0YXRp
Y19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9h
ZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gVmVjdG9yc19ub25ibG9jayhwYXJhbV9OLCBpbnN0
cmVhbV9leGFtcGxlLCBpbnN0cmVhbV90aGV0YSwgaW5zdHJlYW1feSwgb3V0c3RyZWFtX3Jlc3Vs
dCk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2Fp
dChydW4pOwp9CgptYXhfcnVuX3QgKlZlY3RvcnNfbm9uYmxvY2soCglpbnQzMl90IHBhcmFtX04s
Cgljb25zdCBmbG9hdCAqaW5zdHJlYW1fZXhhbXBsZSwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV90
aGV0YSwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV95LAoJZmxvYXQgKm91dHN0cmVhbV9yZXN1bHQp
CnsKCVZlY3RvcnNfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fTiA9IHBhcmFtX047CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9leGFtcGxl
ID0gaW5zdHJlYW1fZXhhbXBsZTsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFtX3RoZXRhID0g
aW5zdHJlYW1fdGhldGE7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV95ID0gaW5zdHJlYW1f
eTsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9yZXN1bHQgPSBvdXRzdHJlYW1fcmVzdWx0
OwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgVmVjdG9yc19z
dGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90
IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAq
Y2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBWZWN0b3Jz
X2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwg
JmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWls
ZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNf
U1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7
CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVu
X25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhf
cnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2Jf
ZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwp
OwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgVmVjdG9yc19ydW4oCgltYXhfZW5naW5lX3QgKmVu
Z2luZSwKCVZlY3RvcnNfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90
ICpydW4gPSBWZWN0b3JzX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsK
CUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1
bik7Cn0KCm1heF9ydW5fdCAqVmVjdG9yc19ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVu
Z2luZSwKCVZlY3RvcnNfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNi
X2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBWZWN0b3JzX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwg
aW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFj
dGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFj
dGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47
CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUs
IGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5n
aW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5h
YmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJ
cmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBm
dW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBn
cm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBB
Y3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2Ug
YXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZvaWQgVmVjdG9yc19ydW5fZ3JvdXAobWF4X2dy
b3VwX3QgKmdyb3VwLCBWZWN0b3JzX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1h
eF9ydW5fdCAqcnVuID0gVmVjdG9yc19ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGludGVyZmFj
ZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsK
CW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0
aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICog
CiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2
YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1
cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRo
YXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1
bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1
bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBH
cm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8g
cnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBh
Y3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKlZlY3RvcnNf
cnVuX2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgVmVjdG9yc19hY3Rpb25zX3Qg
KmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dl
dF9tYXhfZmlsZShncm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gVmVjdG9yc19jb252
ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxMKTsK
CWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVy
cm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpy
dW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25z
X2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4g
YWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICog
CiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICog
XHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRv
IHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdp
bmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBz
aXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBWZWN0b3JzX3J1bl9hcnJheShtYXhfZW5nYXJyYXlf
dCAqZW5nYXJyYXksIFZlY3RvcnNfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7Cglt
YXhfcnVuX3QgKnJ1biA9IFZlY3RvcnNfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRl
cmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
ICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQg
c3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcu
CiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFy
cmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2Yg
aW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhl
IHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9y
IDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVk
LCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFt
IFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1
cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5V
TEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqVmVjdG9yc19ydW5fYXJyYXlfbm9u
YmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBWZWN0b3JzX2FjdGlvbnNfdCAqaW50ZXJm
YWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRf
bWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkg
PSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7CglpZiAoYWN0YXJy
YXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgltYXhfYWN0aW9uc190ICoqYXJyX2FjdGlvbnMgPSBt
YWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsKCWZvciAoIGkg
PSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBpKysgKSB7CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
cyA9IFZlY3RvcnNfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tp
XSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJ
YXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBh
Y3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9ub25ibG9jayhlbmdh
cnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemUgOyBpKysg
KSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9CgltYXhfYWN0YXJyYXlfZnJl
ZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICog
XGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBk
eW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRo
aXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9u
cyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUg
bWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRl
cmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50
ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhf
YWN0aW9uc190KiBWZWN0b3JzX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgVmVjdG9yc19h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4gVmVjdG9yc19jb252ZXJ0X2lu
dGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3Vu
ZGVmIENIRUNLX0VSUk9SU19TVAojdW5kZWYgQ0hFQ0tfTlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(VectorsKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 80, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 39, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(VectorsKernel, 107, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302d0215009614f1eca34c905034a7e00771f743a7ab91bf6a021434f2120893f3c5f501200a801fe93152c0df4663")
#endif

